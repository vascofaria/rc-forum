/* =============================================================================
 *
 * vector.h
 *
 * =============================================================================
 */

#ifndef __VECTOR_H__
#define __VECTOR_H__

#include <stdbool.h>

typedef struct vector {
    long    size;
    long    capacity;
    void**  elements;
    void  (*eraseElement) (void*);
} vector_t;


/* =============================================================================
 * vector_alloc
 * -- Returns NULL if failed
 * =============================================================================
 */
vector_t*
vector_alloc (long initCapacity, void (*eraseElement) (void*));


/* =============================================================================
 * vector_free
 * =============================================================================
 */
void
vector_free (vector_t* vectorPtr);


/* =============================================================================
 * vector_at
 * -- Returns NULL if failed
 * =============================================================================
 */
void*
vector_at (vector_t* vectorPtr, long i);


/* =============================================================================
 * vector_pushBack
 * -- Returns FALSE if fail, else TRUE
 * =============================================================================
 */
bool
vector_pushBack (vector_t* vectorPtr, void* dataPtr);


/* =============================================================================
 * vector_popBack
 * -- Returns NULL if fail, else returns last element
 * =============================================================================
 */
void*
vector_popBack (vector_t* vectorPtr);


/* =============================================================================
 * vector_getSize
 * =============================================================================
 */
long
vector_getSize (vector_t* vectorPtr);


/* =============================================================================
 * vector_clear
 * =============================================================================
 */
void
vector_clear (vector_t* vectorPtr);


/* =============================================================================
 * vector_sort
 * =============================================================================
 */
void
vector_sort (vector_t* vectorPtr, int (*compare) (const void*, const void*));


/* =============================================================================
 * vector_copy
 * =============================================================================
 */
bool
vector_copy (vector_t* dstVectorPtr, vector_t* srcVectorPtr);

#endif


/* =============================================================================
 *
 * End of vector.h
 *
 * =============================================================================
 */